#!/usr/bin/perl
#
# Copyright (c) 2015  StorPool
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
# 1. Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in the
#    documentation and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND
# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
# FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
# OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
# HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
# LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
# OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
# SUCH DAMAGE.

use v5.10;
use strict;
use warnings;

use Getopt::Std;

my $debug = 0;

sub debug($);
sub usage($);
sub version();

sub update_driver_py($);
sub update_volume_py($);

MAIN:
{
	my %cfg = (
		templdir	=> undef,
		srcdir		=> undef,
		dstdir		=> undef,
	);
	my %opts;

	getopts('ht:Vv', \%opts) or usage 1;
	version() if $opts{V};
	usage 0 if $opts{h};
	exit 0 if $opts{V} || $opts{h};
	$debug = $opts{v};

	if (!defined $opts{t}) {
		warn "No template directory (-t) specified!\n";
		usage 1;
	} else {
		$cfg{templdir} = $opts{t};
	}
	if (@ARGV != 2) {
		warn "No original and target directory specified\n";
		usage 1;
	}
	@cfg{qw/srcdir dstdir/} = @ARGV;

	update_driver_py \%cfg;
	update_volume_py \%cfg;
}

sub update_driver_py($)
{
	my ($cfg) = @_;
	my ($fname, $src, $dst, $driver_spline, $found);

	$fname = "$cfg->{templdir}/driver.py";
	open $src, '<', $fname or
	    die "Could not open $fname: $!\n";
	while (<$src>) {
		if (/['"]storpool=/) {
			# Remove any indentation, will be readded later
			s/\s*[\r\n]*$//;
			s/^\s*//;

			if (defined $driver_spline) {
				die "Internal error: unexpected double 'storpool=...' line in $fname\n";
			}
			debug "Found the driver.py line: $_";
			$driver_spline = $_;
		}
	}
	close $src or
	    die "Could not close $fname: $!\n";
	if (!defined $driver_spline) {
		die "Internal error: no 'storpool=...' line in $fname\n";
	}

	$fname = "$cfg->{srcdir}/driver.py";
	open $src, '<', $fname or
	    die "Could not open $fname: $!\n";
	open $dst, '>', "$cfg->{dstdir}/driver.py" or
	    die "Could not open $cfg->{dstdir}/driver.py: $!\n";
	while (<$src>) {
		print $dst $_;
		next unless /^(\s*)['"]iscsi=.*VolumeDriver.*?([\r\n]+)$/;
		my ($prologue, $epilogue) = ($1, $2);
		if ($found) {
			die "Found two 'iscsi=...VolumeDriver' lines in $fname\n";
		}
		$found = 1;

		print $dst "$prologue$driver_spline$epilogue";
	}
	close $src or
	    die "Could not close $fname: $!\n";
	close $dst or
	    die "Could not close $cfg->{dstdir}/driver.py: $!\n";
	if (!$found) {
		die "Could not find the 'iscsi=...VolumeDriver' line in $fname\n";
	}
	
	say "$cfg->{srcdir}/driver.py converted to $cfg->{dstdir}/driver.py";
}

sub update_volume_py($)
{
	my ($cfg) = @_;
	my ($fname, $src, $dst, $driver_code);

	$fname = "$cfg->{templdir}/volume.py";
	open $src, '<', $fname or
	    die "Could not open $fname: $!\n";

	while (<$src>) {
		if (defined $driver_code) {
			$driver_code .= $_;
		} elsif (/^class LibvirtStorPoolVolumeDriver/) {
			$driver_code = $_;
			chomp; debug "Found the volume.py start line: $_";
		}
	}

	close $src or
	    die "Could not close $fname: $!\n";
	if (!defined $driver_code) {
		die "Internal error: no 'class LibvirtStorPoolVolumeDriver' line in $fname\n";
	}

	$fname = "$cfg->{srcdir}/volume.py";
	open $src, '<', $fname or
	    die "Could not open $fname: $!\n";
	open $dst, '>', "$cfg->{dstdir}/volume.py" or
	    die "Could not open $cfg->{dstdir}/volume.py: $!\n";

	while (<$src>) {
		print $dst $_;
	}
	print $dst "\n\n$driver_code";

	close $src or
	    die "Could not close $fname: $!\n";
	close $dst or
	    die "Could not close $cfg->{dstdir}/volume.py: $!\n";
	
	say "$cfg->{srcdir}/volume.py converted to $cfg->{dstdir}/volume.py";
}

sub usage($)
{
	my ($err) = @_;
	my $s = <<EOUSAGE
Usage:	add-nova-storpool-driver [-v] -t templatedir origdir storpooldir
	add-nova-storpool-driver -V | -h

	-h	display program usage information and exit
	-t	specify the directory to extract the StorPool driver template
	-V	display program version information and exit
	-v	verbose operation; display diagnostic output
EOUSAGE
	;

	if ($err) {
		die $s;
	} else {
		print "$s";
	}
}

sub version()
{
	print "add-nova-storpool-driver 0.1.0\n";
}

sub debug($)
{
	print STDERR "RDBG $_[0]\n" if $debug;
}
